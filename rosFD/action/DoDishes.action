# Goal: sent to an ActionServer by an ActionClient
# Feedback: as a way to tell an ActionClient about the progress of achieving the Goal
# Result: sent from the ActionServer to ActionClient upon completion of the Goal

# Example:
# Goal: move robot base from A to B
# Feedback: position of the robot at each time step
# Result: the final position of the robot (perhaps somewhere around B, not exactly B)

# CREATION:

# 1. Position:
# package_name
# |- action
# |  |- DoDishes.action
# |- msg 
# |- srv 
# |- CMakeLists.txt
# |- package.xml

# 2. The .action file:
# has 3 section: goal, result, feedback 
# seperated by 3 hyphens (---)
# type var_name
# example:

uint32 dishwasher_id
sensor_msgs/Image input_map
float32 map_resolution
float32 robot_radius
geometry_msgs/Point32[] field_of_view
int32 planning_mode
---
geometry_msgs/Pose2D[] coverage_path
---
float32 map_resolution

# 3. Build a package contains .action file:

# Add this to CMakeLists.txt
# find_package(catkin REQUIRED genmsg actionlib_msgs)
# add_action_files(DIRECTORY action FILES DoDishes.action)
# generate_messages(DEPENDENCIES actionlib_msgs)

# Add this to package.xml of that package
# <build_depend>actionlib_msgs</build_depend>
# <exec_depend>actionlib_msgs</exec_depend>

# Add this to package.xml of above package
# <depend>actionlib</depend>
# <depend>actionlib_msgs</depend>

# After built, the following message file are generated by genaction.py
# in ws/devel/share/package/msg
# Action.msg ActionGoal.msg ActionResult.msg ActionFeedback.msg
# Goal.msg   Result.msg     Feedback.msg

# in ws/devel/include/package
# you have the corresponding .h files
# ActionFeedback.h ActionGoal.h Action.h ActionResult.h
# Feedback.h       Goal.h       Result.h

# But don't necessary concern with these .msg and .h files
# Find the ActionClient and ActionServer.cpp

# But don't necessary concern with these .msg and .h files
# Find the ActionClient.cpp and ActionServer.cpp or .h files in src folder

# For more details:
# http://wiki.ros.org/actionlib
